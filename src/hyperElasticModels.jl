struct hyperElasticModel
    secondPiolaStress::Function
    materialTangentTensor!::Function
    cauchyStress::Function
    spatialTangentTensor!::Function
end

####Saint Venant#############

function saintVenantSecondPiolaStress(E_tensor::Array{T, 2}, Œª::Float64, Œº::Float64) where T
    #E_tensor = getGreenStrain(F_tensor)
    S = zeros(T, 3, 3)
    trace_E = LinearAlgebra.tr(E_tensor)
    for J ‚àà 1:3
        for I ‚àà 1:3
            S[I,J] += Œª*Œ¥(I,J)*trace_E + 2*Œº*E_tensor[I,J]
        end
    end
    return S
end

function saintVenantSecondPiolaStress(E_mandel::Array{T, 1}, Œª::Float64, Œº::Float64) where T
    S = zeros(T, 9)
    #E_mandel = getGreenStrain(F_mandel)
    #E_tensor = convert2DMandelToTensor(E_mandel)

    trace_E = 0.0
    for K ‚àà 1:3
        KK = getMandelIndex(K,K)
        trace_E += E_mandel[KK]
    end
    for J ‚àà 1:3
        for I ‚àà 1:3
            IJ = getMandelIndex(I,J)
            S[IJ] += Œª*Œ¥(I,J)*trace_E + 2*Œº*E_mandel[IJ]
        end
    end
    return S
end

function saintVenantSecondPiolaStress(E::Array{T,N}, Œª_Œº::Tuple{Float64, Float64}) where {T, N}
    return saintVenantSecondPiolaStress(E, Œª_Œº[1], Œª_Œº[2])
end


function saintVenantCauchyStress(F::Array{T,N}, Œª_Œº::Tuple{Float64, Float64}) where {T, N}
    Œª = Œª_Œº[1]
    Œº = Œª_Œº[2]
    E = getGreenStrain(F)
    S = saintVenantSecondPiolaStress(E, Œª, Œº)
    return convertSecondPiola2CauchyStress(S, F)
end

function saintVenantTangent!(‚ÑÇ::Array{T, 4}, E_tensor::Array{T,2}, Œª_Œº::Tuple{Float64, Float64}) where T

    Œª = Œª_Œº[1]
    Œº = Œª_Œº[2]
    #‚ÑÇ = zeros(T, 3, 3, 3, 3)
    fill!(‚ÑÇ, 0.0)
    for L ‚àà 1:3
        for K ‚àà 1:3
            Œ¥_KL = Œ¥(K, L)
            for J ‚àà 1:3
                Œ¥_JL = Œ¥(J,L)
                Œ¥_JK = Œ¥(J,K)
                for I ‚àà 1:3
                    #Œ¥_IJ = Œ¥(I, J)
                    #Œ¥_IK = Œ¥(I, K)
                    #Œ¥_IL = Œ¥(I, L)
                    ‚ÑÇ[I,J,K,L] += Œª*Œ¥(I, J)*Œ¥_KL + Œº*(Œ¥(I, K)*Œ¥_JL+Œ¥_JK*Œ¥(I, L))
                end
            end
        end
    end
    return ‚ÑÇ
end

function saintVenantTangent!(‚ÑÇ::Array{T, 2}, E_mandel::Array{T,1}, Œª_Œº::Tuple{Float64, Float64}) where T
    Œª = Œª_Œº[1]
    Œº = Œª_Œº[2]
    fill!(‚ÑÇ, 0.0)
    for L ‚àà 1:3
        for K ‚àà 1:3
            KL = getMandelIndex(K, L)
            Œ¥_KL = Œ¥(K, L)
            for J ‚àà 1:3
                Œ¥_JL = Œ¥(J,L)
                Œ¥_JK = Œ¥(J,K)
                for I ‚àà 1:3
                    IJ = getMandelIndex(I, J)
                    #Œ¥_IJ = Œ¥(I, J)
                    #Œ¥_IK = Œ¥(I, K)
                    #Œ¥_IL = Œ¥(I, L)
                    ‚ÑÇ[IJ, KL] += Œª*Œ¥(I, J)*Œ¥_KL + Œº*(Œ¥(I, K)*Œ¥_JL+Œ¥_JK*Œ¥(I, L))
                end
            end
        end
    end
    return ‚ÑÇ
end

function saintVenantSpatialTangent!(ùïî::Array{T,4}, F::Array{T,2}, Œª_Œº::Tuple{Float64, Float64}) where {T, N}
    E = getGreenStrain(F)
    ‚ÑÇ = zeros(T, 3,3,3,3)
    fill!(ùïî, 0.0)
    saintVenantTangent!(‚ÑÇ, E, Œª_Œº)
    return convertMaterialTangent2SpatialTangent!(ùïî, ‚ÑÇ, F)
end

function saintVenantSpatialTangent!(ùïî::Array{T,2}, F::Array{T,1}, Œª_Œº::Tuple{Float64, Float64}) where {T, N}
    E = getGreenStrain(F)
    ‚ÑÇ = zeros(T, 9,9)
    fill!(ùïî, 0.0)
    saintVenantTangent!(‚ÑÇ, E, Œª_Œº)
    return convertMaterialTangent2SpatialTangent!(ùïî, ‚ÑÇ, F)
end
##### Definition of Saint Venant Hyper Elastic Model
saintVenantModel  = hyperElasticModel(saintVenantSecondPiolaStress,
    saintVenantTangent!, saintVenantCauchyStress,
    saintVenantSpatialTangent!)
